#RequireAdmin
#NoTrayIcon
#Region ;**** Directives created by AutoIt3Wrapper_GUI ****
#AutoIt3Wrapper_Icon=C:\Windows\Hard_Configurator\Icons\DAE1.ico
#AutoIt3Wrapper_Compile_Both=y
#AutoIt3Wrapper_Res_Comment=Compiled with AutoIt 3.3.14.2
#AutoIt3Wrapper_Res_Description=Documents Anti Exploit
#AutoIt3Wrapper_Res_Fileversion=1.0.1.0
#AutoIt3Wrapper_Res_LegalCopyright=""
#EndRegion ;**** Directives created by AutoIt3Wrapper_GUI ****

Global $fileversion = "1.0.1.0"
Global $copyright = ""
#include "MetroGUI_UDF.au3"
#include <GUIConstants.au3>
#include <Security.au3>
#include <GuiButton.au3>
#include <GUIConstantsEx.au3>
#include <WindowsConstants.au3>


#include 'CurrentAccountDocumentAntiExploit.au3'
#include 'ExtMsgBox.au3'
#include 'CurrentUser.au3'

GLobal $DocumentMSOAntiExploitData
GLobal $idComboBoxDocumentMSOAntiExploit
Global $DocumentAARAntiExploitData
Global $idComboBoxDocumentAARAntiExploit


DAE_MainGUI()

Func  DAE_MainGUI()
Opt("GUIOnEventMode", 1)
;Set Theme
_SetTheme("DarkTeal") ;See MetroThemes.au3 for selectable themes or to add more

;Create resizable Metro GUI
Global $Form1 = _Metro_CreateGUI("DocumentsAntiExploit", 400, 210, -1, -1, True)
_Metro_SetGUIOption($Form1, True , False)
;_Metro_EnableHighDPIScaling(True)
_Metro_EnableOnEventMode(True)

;Add/create control buttons to the GUI
$Control_Buttons = _Metro_AddControlButtons(False, False, False, False, True) ;CloseBtn = True, MaximizeBtn = True, MinimizeBtn = True, FullscreenBtn = True, MenuBtn = True

;Set variables for the handles of the GUI-Control buttons. (Above function always returns an array this size and in this order, no matter which buttons are selected.)
Global $GUI_CLOSE_BUTTON = $Control_Buttons[0]
Global $GUI_MINIMIZE_BUTTON = $Control_Buttons[3]
Global $GUI_MENU_BUTTON = $Control_Buttons[6]

;============================================================================================================================
;Create  Buttons
$Button0 = GUICtrlCreateButton("", 0, 0, 1, 1)

Global $DAEiClose = GUICtrlCreateButton("X", 370, 5, 20, 20)
GUICtrlSetOnEvent($DAEiClose, "DAEGUI_EVENT_CLOSE")
GUICtrlSetFont($DAEiClose, 12, 600)
GUICtrlSetColor($DAEiClose, 0xFFFFFF)
GUICtrlSetBkColor($DAEiClose, 0x000000)


Global $DAEiMinimize = GUICtrlCreateButton("_", 340, -8, 20, 30)
GUICtrlSetOnEvent($DAEiMinimize, "DAEGuiMinimizeToTray")
GUICtrlSetFont($DAEiMinimize, 20, 600)
GUICtrlSetColor($DAEiMinimize, 0xFFFFFF)
GUICtrlSetBkColor($DAEiMinimize, 0x000000)

Global $DAEMenu = GUICtrlCreateButton("Menu", 50, 5, 50, 25)
GUICtrlSetOnEvent($DAEMenu, "OpenMenuDAE")
GUICtrlSetFont($DAEMenu, 10, 600, 0, "Arial", 5)
GUICtrlSetColor($DAEMenu, 0xFFFFFF)
GUICtrlSetBkColor($DAEMenu, 0x000000)
GUICtrlSetTip ($DAEMenu, "Press the button to open the Menu", "Menu options", 1 , 1)

;$DAEMenu1 = GUICtrlCreateButton("Menu1", 100, 5, 50, 25)
;GUICtrlSetOnEvent($DAEMenu1, "OpenMenuDAE1")
;GUICtrlSetFont($DAEMenu1, 10, 600, 0, "Arial", 5)
;GUICtrlSetColor($DAEMenu1, 0xFFFFFF)
;GUICtrlSetBkColor($DAEMenu1, 0x000000)



;   Create a label
Local $LabelDocumentsAntiExploit = GUICtrlCreateLabel ("DocumentsAntiExploit", 140, 10, 150, 16,$SS_CENTER,-1)
GUICtrlSetColor($LabelDocumentsAntiExploit, 0xffffff)
GUICtrlSetFont ( $LabelDocumentsAntiExploit, 9, 500, 2)
GUICtrlSetBkColor($LabelDocumentsAntiExploit, "0x000000")


GLobal $Button1 = GUICtrlCreateButton(@crlf & "Adobe Acrobat Reader", 45, 60, 180, 40)
GUICtrlSetOnEvent($Button1, "HelpAdobeAcrobatReaderXIDC")
GUICtrlSetColor($Button1, 0xffffff)
GUICtrlSetBkColor($Button1, "0x00796b")
GUICtrlSetFont($Button1, 10, 600, 0, "Arial", 5)
GUICtrlSetTip ($Button1, "Press the button to get help.", "Adobe Acrobat Reader", 1 , 1)

Global $Button2 = GUICtrlCreateButton(@crlf & "MS Office", 45, 130, 180, 40)
GUICtrlSetOnEvent($Button2, "HelpMSOffice")
GUICtrlSetColor($Button2, 0xffffff)
GUICtrlSetBkColor($Button2, "0x00796b")
GUICtrlSetFont($Button2, 10, 600, 0, "Arial", 5)
GUICtrlSetTip ($Button2, "Press the button to get help.", "MS Office", 1 , 1)




;Supported Windows versions check
If not (@OSVersion="WIN_10" or  @OSVersion="WIN_81" or @OSVersion="WIN_8" or @OSVersion="WIN_7" or @OSVersion="WIN_VISTA") Then
   MsgBox(262144, "", "Only Windows 10, Windows 8.1, Windows 7, and Windows Vista are supported.")
EndIf

If (@ScriptName = 'DocumentsAntiExploit(x64).exe' And @OSArch = "X86") Then
   MsgBox(262144,"","This file works only in 64-bit Windows version.")
   Exit
EndIf

If (@ScriptName = 'DocumentsAntiExploit(x86).exe' And @OSArch = "X64") Then
   MsgBox(262144,"","This file works only in 32-bit Windows version.")
   Exit
EndIf


$DocumentAARAntiExploitData = CheckCurrentAccountDocumentAARAntiExploit()
If @error Then $DocumentAARAntiExploitData = '?'
$idComboBoxDocumentAARAntiExploit = GUICtrlCreateCombo("ON", 270, 68, 80, 30)
GUICtrlSetOnEvent($idComboBoxDocumentAARAntiExploit, "ComboBoxDocumentAARAntiExploit")
GUICtrlSetColor($idComboBoxDocumentAARAntiExploit, 0xffffff)
GUICtrlSetBkColor($idComboBoxDocumentAARAntiExploit,0x000000)
GUICtrlSetFont($idComboBoxDocumentAARAntiExploit, 11, 500, 0, "Arial", 5)

GUICtrlSetData($idComboBoxDocumentAARAntiExploit, "OFF|Partial|?", $DocumentAARAntiExploitData)
GUICtrlSetTip ($idComboBoxDocumentAARAntiExploit, "Choose the setting from the dropdown.", "Adobe Acrobat Reader", 1 , 1)

;MsgBox(0,"",$LoadingProfiles)


$DocumentMSOAntiExploitData = CheckCurrentAccountDocumentMSOAntiExploit()
If @error Then $DocumentMSOAntiExploitData = '?'
$idComboBoxDocumentMSOAntiExploit = GUICtrlCreateCombo("ON1", 270, 138, 80, 30)
GUICtrlSetOnEvent($idComboBoxDocumentMSOAntiExploit, "ComboBoxDocumentMSOAntiExploit")
GUICtrlSetColor($idComboBoxDocumentMSOAntiExploit, 0xffffff)
GUICtrlSetBkColor($idComboBoxDocumentMSOAntiExploit,0x000000)
GUICtrlSetFont($idComboBoxDocumentMSOAntiExploit, 11, 500, 0, "Arial", 5)

GUICtrlSetData($idComboBoxDocumentMSOAntiExploit, "OFF|ON2|OFF2|Partial|?", $DocumentMSOAntiExploitData)
GUICtrlSetTip ($idComboBoxDocumentMSOAntiExploit, "Choose the setting from the dropdown.", "MS Office", 1 , 1)
;MsgBox(0,"",$LoadingProfiles)


;Set resizing options for the controls so they don't change in size or position. This can be customized to match your gui perfectly for resizing. See AutoIt Help file.
GUICtrlSetResizing($Button2, 768 + 8)
GUICtrlSetResizing($Button2, 768 + 8)

;GUICtrlSetResizing($Toggle1, 768 + 2 + 32)

GUISetState(@SW_SHOW)

While 1
  Sleep(1000)
WEnd

EndFunc



Func HelpDocumentsAntiExploit()

Local $text1 = "DocumentsAntiExploit is a companion utility to Hard_Configurator and SwitchDefaultDeny applications. It can be run as an independent tool or from SwitchDefaultDeny application." & @crlf & @crlf & "For now, two options are available: <MS Office> and <Adobe Acrobat Reader>" & @crlf & "Both options can be used to prevent exploiting the system via MS Office and Adobe Acrobat Reader applications, when using the weaponized documents. On the contrary to Hard_Configurator <Documents Anti-Exploit> system-wide feature, the DocumentsAntiExploit features are focused on the current account. So, the user can apply the different restrictions on the different accounts." & @crlf & "Press <MS Office> or <Adobe Acrobat Reader> green buttons for more help." & @crlf & @crlf 

Local $text2 = "There are also some additional options available from the menu:" & @crlf & @crlf & "* Help - shows this help." & @crlf & "* About - shows an info about DocumentsAntiExploit utility." & @crlf & "* Exit - exits the utility." & @crlf & @crlf

Local $text3 = "DocumentsAntiExploit tool is copied to the Public Desktop when uninstalling Hard_Configurator, so the user can still use it to harden MS Office or Adobe Acrobat Reader XI/DC setup. It is portable, but before removing from the computer, the user should apply the settings: <MS Office> = OFF and <Adobe Acrobat Reader> = OFF, on his/her accounts to recover default values of changed settings." & @crlf & "If not, then MS Office or Adobe Acrobat Reader will have non-default settings. Furthermore, a few settings can be locked (non-configurable) by administrator policies in MS Office applications."
Local $text4 = ""

_SetTheme("LightTeal")
_GUIDisable($Form1, 70)
_Metro_MsgBox(0,"DocumentsAntiExploit Help",$text1 & $text2 & $text3 & $text4,800,10)
_GUIDisable($Form1)
_SetTheme("DarkTeal")

EndFunc


Func HelpAdobeAcrobatReaderXIDC()
GUICtrlSetBkColor($Button1, 0xFE0000)
Local $text1 = "The <Adobe Acrobat Reader> feature can prevent the system exploitation via Adobe Acrobat Reader XI/DC, when using the weaponized documents." & @crlf & @crlf & "What <Adobe Acrobat Reader> can do:" & @crlf  & "* the dangerous features in Adobe Acrobat Reader DC (version from the year 2018 at least) on Windows 8.1/10 can be blocked with the ‘Yellow Message Bar’, and if allowed by the user, then silently mitigated in AppContainer;" & @crlf  & "* the dangerous features in Adobe Acrobat Reader XI (all Windows versions) and Adobe Acrobat Reader DC (Windows 8 and prior versions) can be blocked with the ‘Yellow Message Bar’ (the user can allow them);" & @crlf & "* the restrictions apply for the current account and overwrite native settings in Adobe Acrobat Reader XI/DC;" & @crlf & "* the user can apply different restrictions on different accounts." & @crlf & @crlf
Local $text2 = "The meaning of available settings:" & @crlf & "* ON, the restrictions are activated;" & @crlf & "* OFF, the restrictions are deactivated and set to default values;" & @crlf & "* Partial, the restrictions were configured via the external program and do not match the predefined OFF/ON restriction setup."
Local $text3 = ""
_SetTheme("LightTeal")
_GUIDisable($Form1, 70)
_Metro_MsgBox(0,"Help for Adobe Acrobat Reader restrictions",$text1 & $text2 & $text3,600,10)
_GUIDisable($Form1)
_SetTheme("DarkTeal")
Sleep(250)
GUICtrlSetBkColor($Button1, "0x00796b")
EndFunc


Func HelpMSOffice()
GUICtrlSetBkColor($Button2, 0XFE0000)
Local $text1 = "The <MS Office> feature can prevent the system exploitation via MS Office applications, when using the weaponized documents." & @crlf & @crlf & "In MS Office, the below settings are applied (valid up to MS Office 2016):" & @crlf  & "* Disabled Macros in MS Office XP and MS Office 2003+ (Word, Excel, PowerPoint, Access, Publisher, Outlook)." & @crlf & "* Disabled Access to Visual Basic Object Model in MS Office 2007+ (Access, Excel, PowerPoint, and Word)." & @crlf & "* Disabled DDE in Word 2007+ (requires Windows Updates pushed in January 2018, see Microsoft Security Advisory ADV170021)." & @crlf & "* Disabled auto-update for any linked fields (including DDE and OLE) in Word 2007+, Excel 2007+, Outlook 2007+, One Note 2013+." & @crlf & "* Disabled ActiveX in MS Office 2007+." & @crlf & "* Disabled OLE in MS Office 2007+ (Word, Excel, PowerPoint)." & @crlf & "* Disabled ‘Run Programs’ option for action buttons in PowerPoint 2007+." & @crlf & "* Disabled automatic download of linked images in PowerPoint 2007+." & @crlf & "* Disabled TrustCenter blocking notifications (TrustBar) in MS Office 2007+." & @crlf & @crlf & "The above restrictions can be applied parallelly by standard restrictions or by administrator policies." & @crlf & @crlf
Local $text2 = "The meaning of available settings:" & @crlf & "* ON2, the restrictions apply via administrator policies and override (but not overwrite) standard restrictions. The ON2 restrictions may not visible in the Trust Center of MS Office applications." & @crlf & "* OFF2, only the administrator policies are removed, all other restrictions are not changed. This setting is not related to any predefined restriction setup." & @crlf & "* ON1, the administrator policies are removed and the standard restrictions are applied. Please note, that ON1 and OFF work only for MS Office desktop versions, which are installed by default in 'Program Files' or 'Program Files (x86)' folder. They will not work for Mobile versions (Windows Universal Platform versions)." & @crlf & "* OFF, administrator policies and the standard restrictions are removed. MS Office default values of settings are recovered." & @crlf & "* Partial, the restrictions were configured via the external program and do not match the predefined OFF/ON/ON2 restriction setup." & @crlf & @crlf & "Switching between ON2 and OFF2 can be convenient, because the user can in fact switch between the locked/secure ON2 setup and the favorite setup (configurable within MS Office applications)."
Local $text3 = ""
_SetTheme("LightTeal")
_GUIDisable($Form1, 70)
_Metro_MsgBox(0,"Help for MS Office restrictions",$text1 & $text2 & $text3,800,10)
_GUIDisable($Form1)
_SetTheme("DarkTeal")
Sleep(250)
GUICtrlSetBkColor($Button2, "0x00796b")
EndFunc

Func _RegValueEqualTo($s_key, $s_val, $s_data)
;MsgBox(0,"", $s_key & @CRLF & _RegValueExists($s_key, $s_val))
Local $reg = RegRead($s_key, $s_val)
Local $is_error = @error
If ($is_error = 0 And $reg = $s_data) Then
   Return 1
Else
   Return 0
EndIf
EndFunc


Func DAEGUI_EVENT_CLOSE()
_Metro_GUIDelete($Form1) ;Delete GUI/release resources, make sure you use this when working with multiple GUIs!
Exit
EndFunc


Func DAEGuiMinimizeToTray()
GUISetState(@SW_MINIMIZE, $Form1)
EndFunc


Func OpenMenuDAE()
GUICtrlSetBkColor($DAEMenu, 0xFE0000)
;Create an Array containing menu button names
Local $MenuButtonsArray[3] = ["Help", "About", "Exit"]
; Open the metro Menu. See decleration of $MenuButtonsArray above.
Local $MenuSelect = _Metro_MenuStart($Form1, 150, $MenuButtonsArray)
Switch $MenuSelect ;Above function returns the index number of the selected button from the provided buttons array.
	Case "0"
; 		ConsoleWrite("Returned 0 = Help button clicked. Please note that the window border colors are not updated during this demo." & @CRLF)
		HelpDocumentsAntiExploit()
	Case "1"
;		ConsoleWrite("Returned 1 = About button clicked." & @CRLF)
		_GUIDisable($Form1, 70)
		_Metro_MsgBox(0,"","DocumentsAntiExploit " & $copyright & @crlf & "e-mail: Hard_Configurator@o2.pl" & @crlf & "dev. webpage: https://github.com/AndyFul/Hard_Configurator" ,500,12,"",20)
		_GUIDisable($Form1)
	Case "2"
;		ConsoleWrite("Returned 3 = Exit button clicked." & @CRLF)
		_Metro_GUIDelete($Form1)
		Exit
	Case Else
EndSwitch
GUICtrlSetBkColor($DAEMenu, 0x000000)
EndFunc

Func OpenMenuDAE1()
;Create an Array containing menu button names
Local $MenuButtonsArray[3] = ["Help1", "About1", "Exit1"]
; Open the metro Menu. See decleration of $MenuButtonsArray above.
Local $MenuSelect = _Metro_MenuStart($Form1, 150, $MenuButtonsArray)
Switch $MenuSelect ;Above function returns the index number of the selected button from the provided buttons array.
	Case "0"
; 		ConsoleWrite("Returned 0 = Help button clicked. Please note that the window border colors are not updated during this demo." & @CRLF)
		HelpDocumentsAntiExploit()
	Case "1"
;		ConsoleWrite("Returned 1 = About button clicked." & @CRLF)
		_GUIDisable($Form1, 70)
		_Metro_MsgBox(0,"","DocumentsAntiExploit",500,12,"",20)
		_GUIDisable($Form1)
	Case "2"
;		ConsoleWrite("Returned 3 = Exit button clicked." & @CRLF)
		_Metro_GUIDelete($Form1)
		Exit
	Case Else
EndSwitch
EndFunc




Func ComboBoxDocumentMSOAntiExploit()
Local $sComboRead = GUICtrlRead($idComboBoxDocumentMSOAntiExploit)
Switch $sComboRead
   Case 'ON1'
	CurrentAccountDocumentsMSOAntiExploit1('ON1')	
        GUICtrlSetData($idComboBoxDocumentMSOAntiExploit, 'ON1')	
	$DocumentMSOAntiExploitData = 'ON1'			
   Case 'ON2'
	CurrentAccountDocumentsMSOAntiExploit1('ON2')
        GUICtrlSetData($idComboBoxDocumentMSOAntiExploit, 'ON2')	
	$DocumentMSOAntiExploitData = 'ON2'
   Case 'OFF'
	CurrentAccountDocumentsMSOAntiExploit1('OFF')
        GUICtrlSetData($idComboBoxDocumentMSOAntiExploit, 'OFF')
	$DocumentMSOAntiExploitData = 'OFF'
   Case 'OFF2'
	CurrentAccountDocumentsMSOAntiExploit1('OFF2')
	$DocumentMSOAntiExploitData = CheckCurrentAccountDocumentMSOAntiExploit()
        GUICtrlSetData($idComboBoxDocumentMSOAntiExploit, $DocumentMSOAntiExploitData)
   Case 'Partial'
	_GUIDisable($Form1, 70)
	_Metro_MsgBox(0,"MS Office security settings","This option cannot be selected by the user. It is displayed only when the external program was used to change the settings." ,500,12)	
	_GUIDisable($Form1)
        GUICtrlSetData($idComboBoxDocumentMSOAntiExploit, $DocumentMSOAntiExploitData)
   Case '?'
	_GUIDisable($Form1, 70)
	_Metro_MsgBox(0,"MS Office security settings","This option cannot be selected by the user. It is displayed only when the external program was used to change the settings." ,500,12)	
        _GUIDisable($Form1)
        GUICtrlSetData($idComboBoxDocumentMSOAntiExploit, $DocumentMSOAntiExploitData)
   Case Else
EndSwitch
EndFunc


Func ComboBoxDocumentAARAntiExploit()
$sComboRead = GUICtrlRead($idComboBoxDocumentAARAntiExploit)
Switch $sComboRead
   Case 'ON'
	CurrentAccountDocumentsAARAntiExploit1('ON')	
        GUICtrlSetData($idComboBoxDocumentAARAntiExploit, 'ON')	
	$DocumentAARAntiExploitData = 'ON'			
   Case 'OFF'
	CurrentAccountDocumentsAARAntiExploit1('OFF')
        GUICtrlSetData($idComboBoxDocumentAARAntiExploit, 'OFF')
	$DocumentAARAntiExploitData = 'OFF'
   Case 'Partial'
	_GUIDisable($Form1, 70)
	_Metro_MsgBox(0,"Adobe Acrobat Reader security settings","This option cannot be selected by the user. It is displayed only when the external program was used to change the settings." ,500,12)	
	_GUIDisable($Form1)
	GUICtrlSetData($idComboBoxDocumentAARAntiExploit, $DocumentAARAntiExploitData)
   Case '?'
	_GUIDisable($Form1, 70)
	_Metro_MsgBox(0,"Adobe Acrobat Reader security settings","This option cannot be selected by the user. It is displayed only when the external program was used to change the settings." ,500,12)	
        _GUIDisable($Form1)
        GUICtrlSetData($idComboBoxDocumentAARAntiExploit, $DocumentAARAntiExploitData)
   Case Else
EndSwitch
EndFunc

